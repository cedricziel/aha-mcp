on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

name: release-please

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.MY_RELEASE_PLEASE_TOKEN }}
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json

  publish:
    needs: release-please
    runs-on: ubuntu-latest
    if: ${{ needs.release-please.outputs.release_created }}
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run tests
        run: bun test

      - name: Build
        run: bun run build

      - name: Install DXT CLI
        run: npm install -g @anthropic-ai/dxt

      - name: Build DXT package
        run: bun run dxt:pack

      - name: Get package version
        id: package_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Rename DXT file
        run: mv aha-mcp.dxt aha-mcp-v${{ steps.package_version.outputs.version }}.dxt

      - name: Upload DXT to Release
        run: |
          gh release upload ${{ needs.release-please.outputs.tag_name }} \
            aha-mcp-v${{ steps.package_version.outputs.version }}.dxt \
            --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Publish to npm
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  docker:
    needs: release-please
    runs-on: ubuntu-latest
    if: ${{ needs.release-please.outputs.release_created }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from tag
        id: version
        run: |
          # Extract version from tag (e.g., aha-mcp-v0.2.0 -> 0.2.0)
          VERSION="${{ needs.release-please.outputs.tag_name }}"
          VERSION="${VERSION#aha-mcp-v}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "major=$(echo ${VERSION} | cut -d. -f1)" >> $GITHUB_OUTPUT
          echo "minor=$(echo ${VERSION} | cut -d. -f1-2)" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/cedricziel/aha-mcp:latest
            ghcr.io/cedricziel/aha-mcp:${{ steps.version.outputs.version }}
            ghcr.io/cedricziel/aha-mcp:${{ steps.version.outputs.minor }}
            ghcr.io/cedricziel/aha-mcp:${{ steps.version.outputs.major }}
          labels: |
            org.opencontainers.image.source=https://github.com/cedricziel/aha-mcp
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Test that the image can start and respond to --help
          docker run --rm ghcr.io/cedricziel/aha-mcp:${{ steps.version.outputs.version }} --help

      - name: Test Docker image in stdio mode
        run: |
          # Test basic functionality without credentials
          timeout 5s docker run --rm ghcr.io/cedricziel/aha-mcp:${{ steps.version.outputs.version }} --mode stdio || true

      - name: Test Docker image in SSE mode
        run: |
          # Test SSE mode startup
          docker run --rm -d --name aha-mcp-test -p 3001:3001 ghcr.io/cedricziel/aha-mcp:${{ steps.version.outputs.version }} --mode sse
          sleep 5
          # Check health endpoint
          curl -f http://localhost:3001/health || exit 1
          # Check info endpoint
          curl -f http://localhost:3001/ || exit 1
          # Cleanup
          docker stop aha-mcp-test
